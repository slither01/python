

----------o/1 knapsack--------
def knapsack_01(values, weights, capacity):
    n = len(values)

    # Initialize a table to store the results of subproblems
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    # Build the table using bottom-up dynamic programming
    for i in range(1, n + 1):
        for w in range(capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]

    # Backtrack to find the selected items
    selected_items = []
    i, w = n, capacity
    while i > 0 and w > 0:
        if dp[i][w] != dp[i - 1][w]:
            selected_items.append(i - 1)
            w -= weights[i - 1]
        i -= 1

    return dp[n][capacity], selected_items[::-1]

# Example usage
values = [60, 100, 120]
weights = [10, 20, 30]
capacity = 50
max_value, selected_items = knapsack_01(values, weights, capacity)

print(f"Maximum value: {max_value}")
print(f"Selected items: {selected_items}")









--------fractional knapsack-----------
def fractional_knapsack(values, weights, capacity):
    n = len(values)

    # Calculate the value-to-weight ratios for each item
    ratios = [(values[i] / weights[i], i) for i in range(n)]

    # Sort items based on the value-to-weight ratio in descending order
    ratios.sort(reverse=True)

    max_value = 0
    knapsack = [0] * n  # To store the fraction of each item taken

    for ratio, i in ratios:
        if weights[i] <= capacity:
            # Take the whole item
            knapsack[i] = 1
            max_value += values[i]
            capacity -= weights[i]
        else:
            # Take a fraction of the item
            fraction = capacity / weights[i]
            knapsack[i] = fraction
            max_value += fraction * values[i]
            break  # Since the knapsack is full

    return max_value, knapsack

# Example usage
values = [60, 100, 120]
weights = [10, 20, 30]
capacity = 50
max_value, knapsack = fractional_knapsack(values, weights, capacity)

print(f"Maximum value: {max_value}")
print(f"Fraction of each item taken: {knapsack}")
