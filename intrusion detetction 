{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMjgiE1fJ+Xoyg2niUF7tcu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/slither01/python/blob/main/intrusion%20detetction%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "4kHZDQ8yqqGy"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from pandas.api.types import is_numeric_dtype\n",
        "import warnings\n",
        "from sklearn import tree\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.tree  import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, VotingClassifier, GradientBoostingClassifier\n",
        "from sklearn.svm import SVC, LinearSVC\n",
        "from sklearn.naive_bayes import BernoulliNB\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.feature_selection import RFE\n",
        "import itertools\n",
        "from xgboost import XGBClassifier\n",
        "from tabulate import tabulate"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "98uuI8qdekeI",
        "outputId": "ff4b94d0-6f7d-4df0-816f-30a88027131f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train=pd.read_csv('Train_data.csv')"
      ],
      "metadata": {
        "id": "QG4BGO19fMAH"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test=pd.read_csv('Test_data.csv')"
      ],
      "metadata": {
        "id": "iZaCWxHVfkQo"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "7AIIdgx9f99p",
        "outputId": "79f1b062-5d0a-4788-ba85-78e4d72d2153"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   duration protocol_type   service flag  src_bytes  dst_bytes  land  \\\n",
              "0         0           tcp  ftp_data   SF        491          0     0   \n",
              "1         0           udp     other   SF        146          0     0   \n",
              "2         0           tcp   private   S0          0          0     0   \n",
              "3         0           tcp      http   SF        232       8153     0   \n",
              "4         0           tcp      http   SF        199        420     0   \n",
              "\n",
              "   wrong_fragment  urgent  hot  ...  dst_host_srv_count  \\\n",
              "0               0       0    0  ...                  25   \n",
              "1               0       0    0  ...                   1   \n",
              "2               0       0    0  ...                  26   \n",
              "3               0       0    0  ...                 255   \n",
              "4               0       0    0  ...                 255   \n",
              "\n",
              "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
              "0                    0.17                    0.03   \n",
              "1                    0.00                    0.60   \n",
              "2                    0.10                    0.05   \n",
              "3                    1.00                    0.00   \n",
              "4                    1.00                    0.00   \n",
              "\n",
              "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
              "0                         0.17                         0.00   \n",
              "1                         0.88                         0.00   \n",
              "2                         0.00                         0.00   \n",
              "3                         0.03                         0.04   \n",
              "4                         0.00                         0.00   \n",
              "\n",
              "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "0                  0.00                      0.00                  0.05   \n",
              "1                  0.00                      0.00                  0.00   \n",
              "2                  1.00                      1.00                  0.00   \n",
              "3                  0.03                      0.01                  0.00   \n",
              "4                  0.00                      0.00                  0.00   \n",
              "\n",
              "   dst_host_srv_rerror_rate    class  \n",
              "0                      0.00   normal  \n",
              "1                      0.00   normal  \n",
              "2                      0.00  anomaly  \n",
              "3                      0.01   normal  \n",
              "4                      0.00   normal  \n",
              "\n",
              "[5 rows x 42 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e289227-481f-42cd-846e-8a96646fc182\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>protocol_type</th>\n",
              "      <th>service</th>\n",
              "      <th>flag</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>...</th>\n",
              "      <th>dst_host_srv_count</th>\n",
              "      <th>dst_host_same_srv_rate</th>\n",
              "      <th>dst_host_diff_srv_rate</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>ftp_data</td>\n",
              "      <td>SF</td>\n",
              "      <td>491</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>25</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>udp</td>\n",
              "      <td>other</td>\n",
              "      <td>SF</td>\n",
              "      <td>146</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>private</td>\n",
              "      <td>S0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>26</td>\n",
              "      <td>0.10</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>anomaly</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>232</td>\n",
              "      <td>8153</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>255</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.01</td>\n",
              "      <td>normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>199</td>\n",
              "      <td>420</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>255</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>normal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 42 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e289227-481f-42cd-846e-8a96646fc182')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3e289227-481f-42cd-846e-8a96646fc182 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3e289227-481f-42cd-846e-8a96646fc182');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8312e787-8cdc-40f7-8c34-009766251e6b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8312e787-8cdc-40f7-8c34-009766251e6b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8312e787-8cdc-40f7-8c34-009766251e6b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eg30XLtDgGDY",
        "outputId": "b421aaa4-af07-4982-ec88-5301816e087a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 25192 entries, 0 to 25191\n",
            "Data columns (total 42 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   duration                     25192 non-null  int64  \n",
            " 1   protocol_type                25192 non-null  object \n",
            " 2   service                      25192 non-null  object \n",
            " 3   flag                         25192 non-null  object \n",
            " 4   src_bytes                    25192 non-null  int64  \n",
            " 5   dst_bytes                    25192 non-null  int64  \n",
            " 6   land                         25192 non-null  int64  \n",
            " 7   wrong_fragment               25192 non-null  int64  \n",
            " 8   urgent                       25192 non-null  int64  \n",
            " 9   hot                          25192 non-null  int64  \n",
            " 10  num_failed_logins            25192 non-null  int64  \n",
            " 11  logged_in                    25192 non-null  int64  \n",
            " 12  num_compromised              25192 non-null  int64  \n",
            " 13  root_shell                   25192 non-null  int64  \n",
            " 14  su_attempted                 25192 non-null  int64  \n",
            " 15  num_root                     25192 non-null  int64  \n",
            " 16  num_file_creations           25192 non-null  int64  \n",
            " 17  num_shells                   25192 non-null  int64  \n",
            " 18  num_access_files             25192 non-null  int64  \n",
            " 19  num_outbound_cmds            25192 non-null  int64  \n",
            " 20  is_host_login                25192 non-null  int64  \n",
            " 21  is_guest_login               25192 non-null  int64  \n",
            " 22  count                        25192 non-null  int64  \n",
            " 23  srv_count                    25192 non-null  int64  \n",
            " 24  serror_rate                  25192 non-null  float64\n",
            " 25  srv_serror_rate              25192 non-null  float64\n",
            " 26  rerror_rate                  25192 non-null  float64\n",
            " 27  srv_rerror_rate              25192 non-null  float64\n",
            " 28  same_srv_rate                25192 non-null  float64\n",
            " 29  diff_srv_rate                25192 non-null  float64\n",
            " 30  srv_diff_host_rate           25192 non-null  float64\n",
            " 31  dst_host_count               25192 non-null  int64  \n",
            " 32  dst_host_srv_count           25192 non-null  int64  \n",
            " 33  dst_host_same_srv_rate       25192 non-null  float64\n",
            " 34  dst_host_diff_srv_rate       25192 non-null  float64\n",
            " 35  dst_host_same_src_port_rate  25192 non-null  float64\n",
            " 36  dst_host_srv_diff_host_rate  25192 non-null  float64\n",
            " 37  dst_host_serror_rate         25192 non-null  float64\n",
            " 38  dst_host_srv_serror_rate     25192 non-null  float64\n",
            " 39  dst_host_rerror_rate         25192 non-null  float64\n",
            " 40  dst_host_srv_rerror_rate     25192 non-null  float64\n",
            " 41  class                        25192 non-null  object \n",
            "dtypes: float64(15), int64(23), object(4)\n",
            "memory usage: 8.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "SIW3CFfJgHjG",
        "outputId": "4444d4b5-f207-4926-fd57-850b293f15fe"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           duration     src_bytes     dst_bytes          land  wrong_fragment  \\\n",
              "count  25192.000000  2.519200e+04  2.519200e+04  25192.000000    25192.000000   \n",
              "mean     305.054104  2.433063e+04  3.491847e+03      0.000079        0.023738   \n",
              "std     2686.555640  2.410805e+06  8.883072e+04      0.008910        0.260221   \n",
              "min        0.000000  0.000000e+00  0.000000e+00      0.000000        0.000000   \n",
              "25%        0.000000  0.000000e+00  0.000000e+00      0.000000        0.000000   \n",
              "50%        0.000000  4.400000e+01  0.000000e+00      0.000000        0.000000   \n",
              "75%        0.000000  2.790000e+02  5.302500e+02      0.000000        0.000000   \n",
              "max    42862.000000  3.817091e+08  5.151385e+06      1.000000        3.000000   \n",
              "\n",
              "            urgent           hot  num_failed_logins     logged_in  \\\n",
              "count  25192.00000  25192.000000       25192.000000  25192.000000   \n",
              "mean       0.00004      0.198039           0.001191      0.394768   \n",
              "std        0.00630      2.154202           0.045418      0.488811   \n",
              "min        0.00000      0.000000           0.000000      0.000000   \n",
              "25%        0.00000      0.000000           0.000000      0.000000   \n",
              "50%        0.00000      0.000000           0.000000      0.000000   \n",
              "75%        0.00000      0.000000           0.000000      1.000000   \n",
              "max        1.00000     77.000000           4.000000      1.000000   \n",
              "\n",
              "       num_compromised  ...  dst_host_count  dst_host_srv_count  \\\n",
              "count     25192.000000  ...    25192.000000        25192.000000   \n",
              "mean          0.227850  ...      182.532074          115.063036   \n",
              "std          10.417352  ...       98.993895          110.646850   \n",
              "min           0.000000  ...        0.000000            0.000000   \n",
              "25%           0.000000  ...       84.000000           10.000000   \n",
              "50%           0.000000  ...      255.000000           61.000000   \n",
              "75%           0.000000  ...      255.000000          255.000000   \n",
              "max         884.000000  ...      255.000000          255.000000   \n",
              "\n",
              "       dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
              "count            25192.000000            25192.000000   \n",
              "mean                 0.519791                0.082539   \n",
              "std                  0.448944                0.187191   \n",
              "min                  0.000000                0.000000   \n",
              "25%                  0.050000                0.000000   \n",
              "50%                  0.510000                0.030000   \n",
              "75%                  1.000000                0.070000   \n",
              "max                  1.000000                1.000000   \n",
              "\n",
              "       dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
              "count                 25192.000000                 25192.000000   \n",
              "mean                      0.147453                     0.031844   \n",
              "std                       0.308367                     0.110575   \n",
              "min                       0.000000                     0.000000   \n",
              "25%                       0.000000                     0.000000   \n",
              "50%                       0.000000                     0.000000   \n",
              "75%                       0.060000                     0.020000   \n",
              "max                       1.000000                     1.000000   \n",
              "\n",
              "       dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "count          25192.000000              25192.000000          25192.000000   \n",
              "mean               0.285800                  0.279846              0.117800   \n",
              "std                0.445316                  0.446075              0.305869   \n",
              "min                0.000000                  0.000000              0.000000   \n",
              "25%                0.000000                  0.000000              0.000000   \n",
              "50%                0.000000                  0.000000              0.000000   \n",
              "75%                1.000000                  1.000000              0.000000   \n",
              "max                1.000000                  1.000000              1.000000   \n",
              "\n",
              "       dst_host_srv_rerror_rate  \n",
              "count              25192.000000  \n",
              "mean                   0.118769  \n",
              "std                    0.317333  \n",
              "min                    0.000000  \n",
              "25%                    0.000000  \n",
              "50%                    0.000000  \n",
              "75%                    0.000000  \n",
              "max                    1.000000  \n",
              "\n",
              "[8 rows x 38 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f07f910-8de0-434a-b058-02c72b26890e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>num_failed_logins</th>\n",
              "      <th>logged_in</th>\n",
              "      <th>num_compromised</th>\n",
              "      <th>...</th>\n",
              "      <th>dst_host_count</th>\n",
              "      <th>dst_host_srv_count</th>\n",
              "      <th>dst_host_same_srv_rate</th>\n",
              "      <th>dst_host_diff_srv_rate</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>25192.000000</td>\n",
              "      <td>2.519200e+04</td>\n",
              "      <td>2.519200e+04</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.00000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "      <td>25192.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>305.054104</td>\n",
              "      <td>2.433063e+04</td>\n",
              "      <td>3.491847e+03</td>\n",
              "      <td>0.000079</td>\n",
              "      <td>0.023738</td>\n",
              "      <td>0.00004</td>\n",
              "      <td>0.198039</td>\n",
              "      <td>0.001191</td>\n",
              "      <td>0.394768</td>\n",
              "      <td>0.227850</td>\n",
              "      <td>...</td>\n",
              "      <td>182.532074</td>\n",
              "      <td>115.063036</td>\n",
              "      <td>0.519791</td>\n",
              "      <td>0.082539</td>\n",
              "      <td>0.147453</td>\n",
              "      <td>0.031844</td>\n",
              "      <td>0.285800</td>\n",
              "      <td>0.279846</td>\n",
              "      <td>0.117800</td>\n",
              "      <td>0.118769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2686.555640</td>\n",
              "      <td>2.410805e+06</td>\n",
              "      <td>8.883072e+04</td>\n",
              "      <td>0.008910</td>\n",
              "      <td>0.260221</td>\n",
              "      <td>0.00630</td>\n",
              "      <td>2.154202</td>\n",
              "      <td>0.045418</td>\n",
              "      <td>0.488811</td>\n",
              "      <td>10.417352</td>\n",
              "      <td>...</td>\n",
              "      <td>98.993895</td>\n",
              "      <td>110.646850</td>\n",
              "      <td>0.448944</td>\n",
              "      <td>0.187191</td>\n",
              "      <td>0.308367</td>\n",
              "      <td>0.110575</td>\n",
              "      <td>0.445316</td>\n",
              "      <td>0.446075</td>\n",
              "      <td>0.305869</td>\n",
              "      <td>0.317333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>84.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.400000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>61.000000</td>\n",
              "      <td>0.510000</td>\n",
              "      <td>0.030000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.790000e+02</td>\n",
              "      <td>5.302500e+02</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>42862.000000</td>\n",
              "      <td>3.817091e+08</td>\n",
              "      <td>5.151385e+06</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>884.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 38 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f07f910-8de0-434a-b058-02c72b26890e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f07f910-8de0-434a-b058-02c72b26890e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f07f910-8de0-434a-b058-02c72b26890e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e548ac87-8c34-4121-8ab5-20329710e7ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e548ac87-8c34-4121-8ab5-20329710e7ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e548ac87-8c34-4121-8ab5-20329710e7ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train.describe(include='object')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "JImGu3P5gNG1",
        "outputId": "694d01d9-ef03-4255-afb0-0215f1e60b7c"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       protocol_type service   flag   class\n",
              "count          25192   25192  25192   25192\n",
              "unique             3      66     11       2\n",
              "top              tcp    http     SF  normal\n",
              "freq           20526    8003  14973   13449"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50657653-c91d-4952-b515-ee6e83921429\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>protocol_type</th>\n",
              "      <th>service</th>\n",
              "      <th>flag</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>25192</td>\n",
              "      <td>25192</td>\n",
              "      <td>25192</td>\n",
              "      <td>25192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>3</td>\n",
              "      <td>66</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>20526</td>\n",
              "      <td>8003</td>\n",
              "      <td>14973</td>\n",
              "      <td>13449</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50657653-c91d-4952-b515-ee6e83921429')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-50657653-c91d-4952-b515-ee6e83921429 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-50657653-c91d-4952-b515-ee6e83921429');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c94fa6ed-1248-402e-bbae-a555e1ad452f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c94fa6ed-1248-402e-bbae-a555e1ad452f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c94fa6ed-1248-402e-bbae-a555e1ad452f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"train\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"protocol_type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"20526\",\n          \"25192\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"service\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          66,\n          \"8003\",\n          \"25192\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flag\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          11,\n          \"14973\",\n          \"25192\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"13449\",\n          \"25192\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3xigSOX4gPJQ",
        "outputId": "9e08cbdb-ef5f-41f8-c7ed-1d45d61a2133"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(25192, 42)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "McubvaurgPBf",
        "outputId": "70050052-263d-4b03-ff52-681bdac4d4aa"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "duration                       0\n",
              "protocol_type                  0\n",
              "service                        0\n",
              "flag                           0\n",
              "src_bytes                      0\n",
              "dst_bytes                      0\n",
              "land                           0\n",
              "wrong_fragment                 0\n",
              "urgent                         0\n",
              "hot                            0\n",
              "num_failed_logins              0\n",
              "logged_in                      0\n",
              "num_compromised                0\n",
              "root_shell                     0\n",
              "su_attempted                   0\n",
              "num_root                       0\n",
              "num_file_creations             0\n",
              "num_shells                     0\n",
              "num_access_files               0\n",
              "num_outbound_cmds              0\n",
              "is_host_login                  0\n",
              "is_guest_login                 0\n",
              "count                          0\n",
              "srv_count                      0\n",
              "serror_rate                    0\n",
              "srv_serror_rate                0\n",
              "rerror_rate                    0\n",
              "srv_rerror_rate                0\n",
              "same_srv_rate                  0\n",
              "diff_srv_rate                  0\n",
              "srv_diff_host_rate             0\n",
              "dst_host_count                 0\n",
              "dst_host_srv_count             0\n",
              "dst_host_same_srv_rate         0\n",
              "dst_host_diff_srv_rate         0\n",
              "dst_host_same_src_port_rate    0\n",
              "dst_host_srv_diff_host_rate    0\n",
              "dst_host_serror_rate           0\n",
              "dst_host_srv_serror_rate       0\n",
              "dst_host_rerror_rate           0\n",
              "dst_host_srv_rerror_rate       0\n",
              "class                          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total = train.shape[0]\n",
        "missing_columns = [col for col in train.columns if train[col].isnull().sum() > 0]\n",
        "for col in missing_columns:\n",
        "    null_count = train[col].isnull().sum()\n",
        "    per = (null_count/total) * 100\n",
        "    print(f\"{col}: {null_count} ({round(per, 3)}%)\")"
      ],
      "metadata": {
        "id": "KilAFq0pgXrN"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Number of duplicate rows: {train.duplicated().sum()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TSAUg0URgXjH",
        "outputId": "61d77124-6d7a-433b-b1cc-f0a635df28fb"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of duplicate rows: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=train['class'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "LFuKmnnDgXaK",
        "outputId": "5c41bd23-65cf-4449-985a-37717e7f05f5"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='class', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print('Class distribution Training set:')\n",
        "print(train['class'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e0bNW9q1ggPi",
        "outputId": "853ef47c-ebcc-4cb7-c58d-5760a34e2048"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class distribution Training set:\n",
            "class\n",
            "normal     13449\n",
            "anomaly    11743\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def le(df):\n",
        "    for col in df.columns:\n",
        "        if df[col].dtype == 'object':\n",
        "                label_encoder = LabelEncoder()\n",
        "                df[col] = label_encoder.fit_transform(df[col])\n",
        "\n",
        "le(train)\n",
        "le(test)"
      ],
      "metadata": {
        "id": "NIPsMKn5ggNF"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train.drop(['num_outbound_cmds'], axis=1, inplace=True)\n",
        "test.drop(['num_outbound_cmds'], axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "dvx5CXk3ggKi"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "-HhTslJYggFL",
        "outputId": "ee4c71d6-7793-4501-fe8d-4584b87b4244"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   duration  protocol_type  service  flag  src_bytes  dst_bytes  land  \\\n",
              "0         0              1       19     9        491          0     0   \n",
              "1         0              2       41     9        146          0     0   \n",
              "2         0              1       46     5          0          0     0   \n",
              "3         0              1       22     9        232       8153     0   \n",
              "4         0              1       22     9        199        420     0   \n",
              "\n",
              "   wrong_fragment  urgent  hot  ...  dst_host_srv_count  \\\n",
              "0               0       0    0  ...                  25   \n",
              "1               0       0    0  ...                   1   \n",
              "2               0       0    0  ...                  26   \n",
              "3               0       0    0  ...                 255   \n",
              "4               0       0    0  ...                 255   \n",
              "\n",
              "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
              "0                    0.17                    0.03   \n",
              "1                    0.00                    0.60   \n",
              "2                    0.10                    0.05   \n",
              "3                    1.00                    0.00   \n",
              "4                    1.00                    0.00   \n",
              "\n",
              "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
              "0                         0.17                         0.00   \n",
              "1                         0.88                         0.00   \n",
              "2                         0.00                         0.00   \n",
              "3                         0.03                         0.04   \n",
              "4                         0.00                         0.00   \n",
              "\n",
              "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "0                  0.00                      0.00                  0.05   \n",
              "1                  0.00                      0.00                  0.00   \n",
              "2                  1.00                      1.00                  0.00   \n",
              "3                  0.03                      0.01                  0.00   \n",
              "4                  0.00                      0.00                  0.00   \n",
              "\n",
              "   dst_host_srv_rerror_rate  class  \n",
              "0                      0.00      1  \n",
              "1                      0.00      1  \n",
              "2                      0.00      0  \n",
              "3                      0.01      1  \n",
              "4                      0.00      1  \n",
              "\n",
              "[5 rows x 41 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-05ad5b11-3f32-4916-90ce-8e3202645940\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>protocol_type</th>\n",
              "      <th>service</th>\n",
              "      <th>flag</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>...</th>\n",
              "      <th>dst_host_srv_count</th>\n",
              "      <th>dst_host_same_srv_rate</th>\n",
              "      <th>dst_host_diff_srv_rate</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>19</td>\n",
              "      <td>9</td>\n",
              "      <td>491</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>25</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>41</td>\n",
              "      <td>9</td>\n",
              "      <td>146</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>46</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>26</td>\n",
              "      <td>0.10</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>9</td>\n",
              "      <td>232</td>\n",
              "      <td>8153</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>255</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>9</td>\n",
              "      <td>199</td>\n",
              "      <td>420</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>255</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 41 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05ad5b11-3f32-4916-90ce-8e3202645940')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-05ad5b11-3f32-4916-90ce-8e3202645940 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-05ad5b11-3f32-4916-90ce-8e3202645940');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-75c9bcc6-a75f-4dd1-9366-704f9f7be090\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75c9bcc6-a75f-4dd1-9366-704f9f7be090')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-75c9bcc6-a75f-4dd1-9366-704f9f7be090 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "X_train = train.drop(['class'], axis=1)\n",
        "Y_train = train['class']"
      ],
      "metadata": {
        "id": "51lRAVPUgqu8"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rfc = RandomForestClassifier()\n",
        "\n",
        "rfe = RFE(rfc, n_features_to_select=10)\n",
        "rfe = rfe.fit(X_train, Y_train)\n",
        "\n",
        "feature_map = [(i, v) for i, v in itertools.zip_longest(rfe.get_support(), X_train.columns)]\n",
        "selected_features = [v for i, v in feature_map if i==True]\n",
        "\n",
        "selected_features"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SonuY4jjgqrA",
        "outputId": "4f51b79e-45e2-4064-dfbc-758609950ab6"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['protocol_type',\n",
              " 'service',\n",
              " 'flag',\n",
              " 'src_bytes',\n",
              " 'dst_bytes',\n",
              " 'count',\n",
              " 'same_srv_rate',\n",
              " 'diff_srv_rate',\n",
              " 'dst_host_srv_count',\n",
              " 'dst_host_same_srv_rate']"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "X_train = X_train[selected_features]"
      ],
      "metadata": {
        "id": "-Hgje2xVg1-6"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scale = StandardScaler()\n",
        "X_train = scale.fit_transform(X_train)\n",
        "test = scale.fit_transform(test)"
      ],
      "metadata": {
        "id": "7ejVuo0cg17m"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, train_size=0.70, random_state=2)"
      ],
      "metadata": {
        "id": "Xiopg79lg140"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "x_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ex9hLyCgqiJ",
        "outputId": "e8a8ba69-7e59-44e4-a2a7-b993215411be"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(17634, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "x_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zCgmAPBZhNJE",
        "outputId": "eb66c988-baac-4a01-c473-e121c9ba4cb8"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7558, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "y_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WqMx9snEhNGD",
        "outputId": "2b3e6138-588d-4839-8cc7-8a24a6e11a31"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(17634,)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UxrEMpYohNDH",
        "outputId": "8ee0e0d6-75fa-49eb-b5e2-80f99601945f"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7558,)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time"
      ],
      "metadata": {
        "id": "8E6gjp7yhs5U"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "clfl = LogisticRegression(max_iter = 1200000)\n",
        "start_time = time.time()\n",
        "clfl.fit(x_train, y_train.values.ravel())\n",
        "end_time = time.time()\n",
        "print(\"Training time: \", end_time-start_time)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nApxCWozhs2Y",
        "outputId": "8ded60fa-659c-4450-aa82-ce27edeb8794"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training time:  0.06866931915283203\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "start_time = time.time()\n",
        "y_test_pred = clfl.predict(x_train)\n",
        "end_time = time.time()\n",
        "print(\"Testing time: \", end_time-start_time)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kVCP6TU0hstn",
        "outputId": "cce90122-9e7a-4b68-99cd-f599cff62739"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Testing time:  0.014093875885009766\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lg_model = LogisticRegression(random_state = 42)\n",
        "lg_model.fit(x_train, y_train)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "iH_3olIChyaC",
        "outputId": "84282351-e7f2-46b4-86c4-0213ba302d09"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "lg_train, lg_test = lg_model.score(x_train , y_train), lg_model.score(x_test , y_test)\n",
        "\n",
        "print(f\"Training Score: {lg_train}\")\n",
        "print(f\"Test Score: {lg_test}\")\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xg5n1VlchyW9",
        "outputId": "5db7a881-6cb3-42e0-88d6-4ef557bc1e8a"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Score: 0.9287739593966202\n",
            "Test Score: 0.9231278115903678\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import roc_curve, roc_auc_score\n",
        "\n",
        "y_true = np.array([0, 0, 1, 1, 0, 1])\n",
        "y_proba = np.array([0.1, 0.3, 0.8, 0.9, 0.2, 0.7])\n",
        "\n",
        "fpr, tpr, thresholds = roc_curve(y_true, y_proba)\n",
        "\n",
        "auc = roc_auc_score(y_true, y_proba)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "plt.plot(fpr, tpr, label='AUC = %0.2f' % auc)\n",
        "plt.legend(loc='lower right')\n",
        "plt.plot([0, 1], [0, 1], 'r--')\n",
        "plt.xlim([0, 1])\n",
        "plt.ylim([0, 1])\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "bFttLd_pkWsl",
        "outputId": "b2dc3a22-5fef-4f79-98f6-5c87cd6298e0"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install optuna"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oUL5kHNkhyUT",
        "outputId": "d2483e8b-354d-4819-f83c-82a6f175713f"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting optuna\n",
            "  Downloading optuna-3.6.1-py3-none-any.whl (380 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m380.1/380.1 kB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting alembic>=1.5.0 (from optuna)\n",
            "  Downloading alembic-1.13.1-py3-none-any.whl (233 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m233.4/233.4 kB\u001b[0m \u001b[31m30.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting colorlog (from optuna)\n",
            "  Downloading colorlog-6.8.2-py3-none-any.whl (11 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.0)\n",
            "Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.29)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.2)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.1)\n",
            "Collecting Mako (from alembic>=1.5.0->optuna)\n",
            "  Downloading Mako-1.3.2-py3-none-any.whl (78 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.7/78.7 kB\u001b[0m \u001b[31m10.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.10.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna) (3.0.3)\n",
            "Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (2.1.5)\n",
            "Installing collected packages: Mako, colorlog, alembic, optuna\n",
            "Successfully installed Mako-1.3.2 alembic-1.13.1 colorlog-6.8.2 optuna-3.6.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import optuna\n",
        "optuna.logging.set_verbosity(optuna.logging.WARNING)"
      ],
      "metadata": {
        "id": "QuYWswGhhyRn"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def objective(trial):\n",
        "    n_neighbors = trial.suggest_int('KNN_n_neighbors', 2, 16, log=False)\n",
        "    classifier_obj = KNeighborsClassifier(n_neighbors=n_neighbors)\n",
        "    classifier_obj.fit(x_train, y_train)\n",
        "    accuracy = classifier_obj.score(x_test, y_test)\n",
        "    return accuracy"
      ],
      "metadata": {
        "id": "OoZr4e7ViBW4"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "study_KNN = optuna.create_study(direction='maximize')\n",
        "study_KNN.optimize(objective, n_trials=1)\n",
        "print(study_KNN.best_trial)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MSLMx0U_iBUV",
        "outputId": "c24468c4-f580-4f94-e42d-3f5ab99c8f67"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "FrozenTrial(number=0, state=TrialState.COMPLETE, values=[0.980418100026462], datetime_start=datetime.datetime(2024, 4, 4, 19, 14, 7, 786254), datetime_complete=datetime.datetime(2024, 4, 4, 19, 14, 10, 670657), params={'KNN_n_neighbors': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'KNN_n_neighbors': IntDistribution(high=16, log=False, low=2, step=1)}, trial_id=0, value=None)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "KNN_model = KNeighborsClassifier(n_neighbors=study_KNN.best_trial.params['KNN_n_neighbors'])\n",
        "KNN_model.fit(x_train, y_train)\n",
        "\n",
        "KNN_train, KNN_test = KNN_model.score(x_train, y_train), KNN_model.score(x_test, y_test)\n",
        "\n",
        "print(f\"Train Score: {KNN_train}\")\n",
        "print(f\"Test Score: {KNN_test}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wJCm533LiBR0",
        "outputId": "657eb7a1-8565-4de6-bae2-fdbc6783788d"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Score: 0.9807190654417602\n",
            "Test Score: 0.980418100026462\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "clfd = DecisionTreeClassifier(criterion =\"entropy\", max_depth = 4)\n",
        "start_time = time.time()\n",
        "clfd.fit(x_train, y_train.values.ravel())\n",
        "end_time = time.time()\n",
        "print(\"Training time: \", end_time-start_time)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WAJexOZ4iBIn",
        "outputId": "26ddc81d-66f1-4f4e-b05c-2d515f1a87ea"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training time:  0.06506681442260742\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "start_time = time.time()\n",
        "y_test_pred = clfd.predict(x_train)\n",
        "end_time = time.time()\n",
        "print(\"Testing time: \", end_time-start_time)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mCL-5LHliVXC",
        "outputId": "0d214972-d817-4b21-ba2b-f87e570a4956"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Testing time:  0.006395578384399414\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def objective(trial):\n",
        "    dt_max_depth = trial.suggest_int('dt_max_depth', 2, 32, log=False)\n",
        "    dt_max_features = trial.suggest_int('dt_max_features', 2, 10, log=False)\n",
        "    classifier_obj = DecisionTreeClassifier(max_features = dt_max_features, max_depth = dt_max_depth)\n",
        "    classifier_obj.fit(x_train, y_train)\n",
        "    accuracy = classifier_obj.score(x_test, y_test)\n",
        "    return accuracy"
      ],
      "metadata": {
        "id": "M7viTzTjiXWZ"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "study_dt = optuna.create_study(direction='maximize')\n",
        "study_dt.optimize(objective, n_trials=30)\n",
        "print(study_dt.best_trial)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P5FTz5_aiXT_",
        "outputId": "015fa165-e7be-442b-fb4a-d54fc54c283d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "FrozenTrial(number=22, state=TrialState.COMPLETE, values=[0.9955014554114845], datetime_start=datetime.datetime(2024, 4, 4, 19, 15, 38, 482339), datetime_complete=datetime.datetime(2024, 4, 4, 19, 15, 38, 539529), params={'dt_max_depth': 14, 'dt_max_features': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'dt_max_depth': IntDistribution(high=32, log=False, low=2, step=1), 'dt_max_features': IntDistribution(high=10, log=False, low=2, step=1)}, trial_id=22, value=None)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt = DecisionTreeClassifier(max_features = study_dt.best_trial.params['dt_max_features'], max_depth = study_dt.best_trial.params['dt_max_depth'])\n",
        "dt.fit(x_train, y_train)\n",
        "\n",
        "dt_train, dt_test = dt.score(x_train, y_train), dt.score(x_test, y_test)\n",
        "\n",
        "print(f\"Train Score: {dt_train}\")\n",
        "print(f\"Test Score: {dt_test}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VGaru8gsiXRU",
        "outputId": "41534a16-c4fe-4b6e-a0a2-c586bd7f4d29"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Score: 0.9998298741068391\n",
            "Test Score: 0.9949722148716592\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "data = [[\"KNN\", KNN_train, KNN_test],\n",
        "        [\"Logistic Regression\", lg_train, lg_test],\n",
        "        [\"Decision Tree\", dt_train, dt_test]]\n",
        "\n",
        "col_names = [\"Model\", \"Train Score\", \"Test Score\"]\n",
        "print(tabulate(data, headers=col_names, tablefmt=\"fancy_grid\"))\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wmSFRqSUiXG4",
        "outputId": "e9c9f7a2-6513-46ab-e715-8fd8ed618d40"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "╒═════════════════════╤═══════════════╤══════════════╕\n",
            "│ Model               │   Train Score │   Test Score │\n",
            "╞═════════════════════╪═══════════════╪══════════════╡\n",
            "│ KNN                 │      0.980719 │     0.980418 │\n",
            "├─────────────────────┼───────────────┼──────────────┤\n",
            "│ Logistic Regression │      0.928774 │     0.923128 │\n",
            "├─────────────────────┼───────────────┼──────────────┤\n",
            "│ Decision Tree       │      0.99983  │     0.994972 │\n",
            "╘═════════════════════╧═══════════════╧══════════════╛\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "SEED = 42\n",
        "\n",
        "# Decision Tree Model\n",
        "dtc = DecisionTreeClassifier()\n",
        "\n",
        "# KNN\n",
        "knn = KNeighborsClassifier()\n",
        "\n",
        "# LOGISTIC REGRESSION MODEL\n",
        "\n",
        "lr = LogisticRegression()"
      ],
      "metadata": {
        "id": "y6M2NGsKigFt"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "models = {}\n",
        "models['KNeighborsClassifier']= knn\n",
        "models['LogisticRegression']= lr\n",
        "models['DecisionTreeClassifier']= dtc"
      ],
      "metadata": {
        "id": "hXXyPeZ2igC-"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "scores = {}\n",
        "for name in models:\n",
        "  scores[name]={}\n",
        "  for scorer in ['precision','recall']:\n",
        "    scores[name][scorer] = cross_val_score(models[name], x_train, y_train, cv=10, scoring=scorer)"
      ],
      "metadata": {
        "id": "uaIhT8s5igAm"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def line(name):\n",
        "  return '*'*(25-len(name)//2)\n",
        "\n",
        "for name in models:\n",
        "  print(line(name), name, 'Model Validation', line(name))\n",
        "\n",
        "  for scorer in ['precision','recall']:\n",
        "    mean = round(np.mean(scores[name][scorer])*100,2)\n",
        "    stdev = round(np.std(scores[name][scorer])*100,2)\n",
        "    print (\"Mean {}:\".format(scorer),\"\\n\", mean,\"%\", \"+-\",stdev)\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0CIhQ-5iimgF",
        "outputId": "84d4a3f5-e083-48a7-c6af-4c73d61e23e2"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*************** KNeighborsClassifier Model Validation ***************\n",
            "Mean precision: \n",
            " 98.45 % +- 0.48\n",
            "\n",
            "Mean recall: \n",
            " 98.24 % +- 0.54\n",
            "\n",
            "**************** LogisticRegression Model Validation ****************\n",
            "Mean precision: \n",
            " 91.35 % +- 0.57\n",
            "\n",
            "Mean recall: \n",
            " 95.72 % +- 0.67\n",
            "\n",
            "************** DecisionTreeClassifier Model Validation **************\n",
            "Mean precision: \n",
            " 99.5 % +- 0.18\n",
            "\n",
            "Mean recall: \n",
            " 99.47 % +- 0.18\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for name in models:\n",
        "    for scorer in ['precision','recall']:\n",
        "        scores[name][scorer] = scores[name][scorer].mean()\n",
        "scores=pd.DataFrame(scores).swapaxes(\"index\", \"columns\")*100\n",
        "scores.plot(kind = \"bar\",  ylim=[80,100], figsize=(24,6), rot=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "GrrB2sNjimdS",
        "outputId": "18fc9629-08f7-4d8a-e4d7-71371a9c68bc"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2400x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAB4kAAAH/CAYAAABKE+siAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABZyUlEQVR4nO3debRXZb0/8PfhAIcZcgKOoQyKAxecJYdMg0QtQ9JULr9UHK9KiqgpFYiikZaKU1iW4VCpXafSxJCEHHAWs0REAgEFHBIQTdTD9/eHy+/tyEFFD4Ps12utvRZ7P89+9uc5p3V97n6fvXdFqVQqBQAAAAAAAIBCaLCmCwAAAAAAAABg9RESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFMhKh8R//etfs//++6e6ujoVFRW57bbbarWXSqUMHz487du3T9OmTdO7d+9Mnz69Vp9//etfGTBgQFq1apU2bdrkqKOOypIlSz7yum+//XZOPPHErL/++mnRokUOPPDALFiwYGXLBwAAAAAAACi0lQ6J33zzzWyzzTa54oor6my/4IILcumll+bKK6/Mww8/nObNm6dPnz55++23y30GDBiQf/zjHxk/fnzuuOOO/PWvf82xxx77kdc95ZRT8sc//jG///3vM2nSpLz00kv51re+tbLlAwAAAAAAABRaRalUKn3qkysqcuutt+aAAw5I8v5TxNXV1Tn11FNz2mmnJUkWLVqUtm3bZuzYsTn00EMzderUbL311nn00Uez4447JknGjRuX/fbbL3Pnzk11dfVy11m0aFE23HDD/Pa3v81BBx2UJHn22Wez1VZbZfLkyfnSl770aacAAAAAAAAAUCgN63OwmTNnZv78+endu3f5WOvWrdOzZ89Mnjw5hx56aCZPnpw2bdqUA+Ik6d27dxo0aJCHH344/fr1W27cxx9/PO+++26tcbfccstssskmKwyJly5dmqVLl5b3ly1bln/9619Zf/31U1FRUV9TBgAAAAAAAFjjSqVS3njjjVRXV6dBg49+oXS9hsTz589PkrRt27bW8bZt25bb5s+fn4022qh2EQ0bZr311iv3qWvcxo0bp02bNisc98NGjRqVs88++9NMAwAAAAAAAOBzac6cOfniF7/4kX3qNSRemwwdOjRDhgwp7y9atCibbLJJ5syZk1atWq3BygAAAAAAAADq1+LFi9OhQ4e0bNnyY/vWa0jcrl27JMmCBQvSvn378vEFCxZk2223Lfd5+eWXa5333nvv5V//+lf5/LrGfeedd7Jw4cJaTxMvWLBghedUVVWlqqpqueOtWrUSEgMAAAAAAADrpE/y6d2Pfhn1SurUqVPatWuXCRMmlI8tXrw4Dz/8cHbZZZckyS677JKFCxfm8ccfL/f5y1/+kmXLlqVnz551jrvDDjukUaNGtcadNm1aZs+eXR4XAAAAAAAAgI+30k8SL1myJM8//3x5f+bMmZkyZUrWW2+9bLLJJhk8eHDOPffcbL755unUqVOGDRuW6urqHHDAAUmSrbbaKvvss0+OOeaYXHnllXn33XczaNCgHHrooamurk6SvPjii+nVq1euvfba7LzzzmndunWOOuqoDBkyJOutt15atWqV7373u9lll13ypS99qX5+EgAAAAAAAAAFsNIh8WOPPZa99tqrvP/Bd38PP/zwjB07Nt/73vfy5ptv5thjj83ChQuz++67Z9y4cWnSpEn5nN/85jcZNGhQevXqlQYNGuTAAw/MpZdeWm5/9913M23atLz11lvlYxdffHG579KlS9OnT5/87Gc/+1STBgAAAAAAACiqilKpVFrTRawOixcvTuvWrbNo0SLfJAYAAAAAAKDQli1blnfeeWdNl8FKaty4cRo0qPuLwiuTh670k8QAAAAAAADA59c777yTmTNnZtmyZWu6FFZSgwYN0qlTpzRu3PgzjSMkBgAAAAAAgIIolUqZN29eKisr06FDhxU+lcraZ9myZXnppZcyb968bLLJJqmoqPjUYwmJAQAAAAAAoCDee++9vPXWW6murk6zZs3WdDmspA033DAvvfRS3nvvvTRq1OhTj+NPAwAAAAAAAKAgampqkuQzv66YNeOD39sHv8dPS0gMAAAAAAAABfNZXlXMmlNfvzevmwYAAAAAYK3S8cw713QJFMSsH399TZcAsEYIiQEAAAAAgGIa0XpNV0BRjFi0pivgU5g4cWL22muvvP7662nTpk299V0bCIkBAAAAAACg4Fb3Wxw+D0/y77rrrpk3b15at/74PyhZmb5rA98kBgAAAAAAANYp77zzzmceo3HjxmnXrt0n+g7wyvRdGwiJAQAAAAAAgLXannvumUGDBmXQoEFp3bp1NthggwwbNiylUilJ0rFjx4wcOTKHHXZYWrVqlWOPPTZJcv/99+fLX/5ymjZtmg4dOuSkk07Km2++WR536dKlOeOMM9KhQ4dUVVVls802y69+9ask779CuqKiIgsXLkySvPDCC9l///3zhS98Ic2bN0+3bt3ypz/9qc6+SXLzzTenW7duqaqqSseOHXPhhRfWmlPHjh3zox/9KEceeWRatmyZTTbZJL/4xS9W1Y+wFiExAAAAAAAAsNa75ppr0rBhwzzyyCO55JJLctFFF+WXv/xluf2nP/1pttlmmzz55JMZNmxYZsyYkX322ScHHnhg/va3v+XGG2/M/fffn0GDBpXPOeyww/K73/0ul156aaZOnZqf//znadGiRZ3XP/HEE7N06dL89a9/zdNPP53zzz9/hX0ff/zxHHzwwTn00EPz9NNPZ8SIERk2bFjGjh1bq9+FF16YHXfcMU8++WROOOGEHH/88Zk2bdpn/2F9DN8kBgAAAAAAANZ6HTp0yMUXX5yKiopsscUWefrpp3PxxRfnmGOOSZJ89atfzamnnlruf/TRR2fAgAEZPHhwkmTzzTfPpZdemq985SsZM2ZMZs+enZtuuinjx49P7969kySdO3de4fVnz56dAw88MN27d//YvhdddFF69eqVYcOGJUm6du2aZ555Jj/5yU9yxBFHlPvtt99+OeGEE5IkZ5xxRi6++OLce++92WKLLVb+B7QSPEkMAAAAAAAArPW+9KUv1frm7y677JLp06enpqYmSbLjjjvW6v/UU09l7NixadGiRXnr06dPli1blpkzZ2bKlCmprKzMV77ylU90/ZNOOinnnntudtttt5x11ln529/+tsK+U6dOzW677Vbr2G677Var3iTp0aNH+d8VFRVp165dXn755U9Uz2chJAYAAAAAAAA+95o3b15rf8mSJTnuuOMyZcqU8vbUU09l+vTp6dKlS5o2bbpS4x999NH55z//me985zt5+umns+OOO+ayyy77TDU3atSo1n5FRUWWLVv2mcb8JITEAAAAAAAAwFrv4YcfrrX/0EMPZfPNN09lZWWd/bfffvs888wz2WyzzZbbGjdunO7du2fZsmWZNGnSJ66hQ4cO+Z//+Z/ccsstOfXUU3PVVVfV2W+rrbbKAw88UOvYAw88kK5du66w3tVJSAwAAAAAAACs9WbPnp0hQ4Zk2rRp+d3vfpfLLrssJ5988gr7n3HGGXnwwQczaNCgTJkyJdOnT8/tt9+eQYMGJUk6duyYww8/PEceeWRuu+22zJw5MxMnTsxNN91U53iDBw/O3XffnZkzZ+aJJ57Ivffem6222qrOvqeeemomTJiQkSNH5rnnnss111yTyy+/PKeddtpn/0HUg4ZrugAAAAAAAACAj3PYYYfl3//+d3beeedUVlbm5JNPzrHHHrvC/j169MikSZPygx/8IF/+8pdTKpXSpUuXHHLIIeU+Y8aMyfe///2ccMIJee2117LJJpvk+9//fp3j1dTU5MQTT8zcuXPTqlWr7LPPPrn44ovr7Lv99tvnpptuyvDhwzNy5Mi0b98+55xzTo444ojP9DOoLxWlUqm0potYHRYvXpzWrVtn0aJFadWq1ZouBwAAAACAFeh45p1rugQKYlaT/17TJVAUIxat6QrK3n777cycOTOdOnVKkyZN1nQ5n9iee+6ZbbfdNqNHj17TpaxRH/X7W5k81OumAQAAAAAAAApESAwAAAAAAABQIL5JDAAAAAAAAKzVJk6cuKZLWKd4khgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIAPGTFiRLbddtvy/hFHHJEDDjhgjdVTnxqu6QIAAAAAAACANWxE69V8vUWr93rUIiSGVaDjmXeu6RIoiFk//vqaLgEAAAAAAFa7d955J40bN17TZXxued00AAAAAAAAsFbbc889M2jQoAwePDgbbLBB+vTpk7///e/Zd99906JFi7Rt2zbf+c538uqrr5bPWbZsWS644IJsttlmqaqqyiabbJLzzjuv3H7GGWeka9euadasWTp37pxhw4bl3XffXRPTW+2ExAAAAAAAAMBa75prrknjxo3zwAMP5Mc//nG++tWvZrvttstjjz2WcePGZcGCBTn44IPL/YcOHZof//jHGTZsWJ555pn89re/Tdu2bcvtLVu2zNixY/PMM8/kkksuyVVXXZWLL754TUxttfO6aQAAAAAAAGCtt/nmm+eCCy5Ikpx77rnZbrvt8qMf/ajcfvXVV6dDhw557rnn0r59+1xyySW5/PLLc/jhhydJunTpkt13373c/4c//GH53x07dsxpp52WG264Id/73vdW04zWHCExAAAAAAAAsNbbYYcdyv9+6qmncu+996ZFixbL9ZsxY0YWLlyYpUuXplevXisc78Ybb8yll16aGTNmZMmSJXnvvffSqlWrVVL72kZIDPB5NqL1mq6AohixaE1XAAAAAAAUXPPmzcv/XrJkSfbff/+cf/75y/Vr3759/vnPf37kWJMnT86AAQNy9tlnp0+fPmndunVuuOGGXHjhhfVe99pISAwAAAAAAAB8rmy//fa5+eab07FjxzRsuHzkufnmm6dp06aZMGFCjj766OXaH3zwwWy66ab5wQ9+UD72wgsvrNKa1yYN1nQBAAAAAAAAACvjxBNPzL/+9a/0798/jz76aGbMmJG77747AwcOTE1NTZo0aZIzzjgj3/ve93LttddmxowZeeihh/KrX/0qyfsh8uzZs3PDDTdkxowZufTSS3Prrbeu4VmtPkJiAAAAAAAA4HOluro6DzzwQGpqarL33nune/fuGTx4cNq0aZMGDd6PQIcNG5ZTTz01w4cPz1ZbbZVDDjkkL7/8cpLkm9/8Zk455ZQMGjQo2267bR588MEMGzZsTU5ptaoolUqlNV3E6rB48eK0bt06ixYtKswHp1lzOp5555ougYKY1eS/13QJFIVvEgMAALAaub/G6uL+GqvNWnR/7e23387MmTPTqVOnNGnSZE2Xw0r6qN/fyuShniQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAQMGUSqU1XQKfQn393hrWyygAAAAAAADAWq9Ro0apqKjIK6+8kg033DAVFRVruiQ+oVKplFdeeSUVFRVp1KjRZxpLSAwAAAAAAAAFUVlZmS9+8YuZO3duZs2atabLYSVVVFTki1/8YiorKz/TOKskJH7jjTcybNiw3HrrrXn55Zez3Xbb5ZJLLslOO+2UJCv8i4QLLrggp59+ep1tI0aMyNlnn13r2BZbbJFnn322fosHAAAAAACAdViLFi2y+eab5913313TpbCSGjVq9JkD4mQVhcRHH310/v73v+e6665LdXV1rr/++vTu3TvPPPNMNt5448ybN69W/7vuuitHHXVUDjzwwI8ct1u3brnnnnv+r/iGHoQGAAAAAACAlVVZWVkvYSOfT/Wesv773//OzTffnNtvvz177LFHkvefAv7jH/+YMWPG5Nxzz027du1qnXP77bdnr732SufOnT+62IYNlzsXAAAAAAAAgE+uQX0P+N5776WmpiZNmjSpdbxp06a5//77l+u/YMGC3HnnnTnqqKM+duzp06enuro6nTt3zoABAzJ79uwV9l26dGkWL15cawMAAAAAAAAounoPiVu2bJlddtklI0eOzEsvvZSamppcf/31mTx58nKvmU6Sa665Ji1btsy3vvWtjxy3Z8+eGTt2bMaNG5cxY8Zk5syZ+fKXv5w33nijzv6jRo1K69aty1uHDh3qZX4AAAAAAAAAn2f1HhInyXXXXZdSqZSNN944VVVVufTSS9O/f/80aLD85a6++uoMGDBguSePP2zffffNt7/97fTo0SN9+vTJn/70pyxcuDA33XRTnf2HDh2aRYsWlbc5c+bUy9wAAAAAAAAAPs/q/ZvESdKlS5dMmjQpb775ZhYvXpz27dvnkEMOWe6bw/fdd1+mTZuWG2+8caWv0aZNm3Tt2jXPP/98ne1VVVWpqqr6VPUDAAAAAAAArKtWyZPEH2jevHnat2+f119/PXfffXf69u1bq/1Xv/pVdthhh2yzzTYrPfaSJUsyY8aMtG/fvr7KBQAAAAAAAFjnrZKQ+O677864ceMyc+bMjB8/PnvttVe23HLLDBw4sNxn8eLF+f3vf5+jjz66zjF69eqVyy+/vLx/2mmnZdKkSZk1a1YefPDB9OvXL5WVlenfv/+qmAIAAAAAAADAOmmVvG560aJFGTp0aObOnZv11lsvBx54YM4777w0atSo3OeGG25IqVRaYcg7Y8aMvPrqq+X9uXPnpn///nnttdey4YYbZvfdd89DDz2UDTfccFVMAQAAAAAAAGCdVFEqlUpruojVYfHixWndunUWLVqUVq1arelyWMd1PPPONV0CBTGryX+v6RIoihGL1nQFAAAAFIj7a6wu7q+x2ri/xmqwMnnoKv0mMQAAAAAAAABrFyExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgTRc0wUAAADAOmtE6zVdAUUxYtGargAAAPgc8SQxAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIKskJH7jjTcyePDgbLrppmnatGl23XXXPProo+X2I444IhUVFbW2ffbZ52PHveKKK9KxY8c0adIkPXv2zCOPPLIqygcAAAAAAABYZ62SkPjoo4/O+PHjc9111+Xpp5/O3nvvnd69e+fFF18s99lnn30yb9688va73/3uI8e88cYbM2TIkJx11ll54oknss0226RPnz55+eWXV8UUAAAAAAAAANZJ9R4S//vf/87NN9+cCy64IHvssUc222yzjBgxIptttlnGjBlT7ldVVZV27dqVty984QsfOe5FF12UY445JgMHDszWW2+dK6+8Ms2aNcvVV19d31MAAAAAAAAAWGfVe0j83nvvpaamJk2aNKl1vGnTprn//vvL+xMnTsxGG22ULbbYIscff3xee+21FY75zjvv5PHHH0/v3r3/r/AGDdK7d+9Mnjy5vqcAAAAAAAAAsM6q95C4ZcuW2WWXXTJy5Mi89NJLqampyfXXX5/Jkydn3rx5Sd5/1fS1116bCRMm5Pzzz8+kSZOy7777pqamps4xX3311dTU1KRt27a1jrdt2zbz58+v85ylS5dm8eLFtTYAAAAAAACAomu4Kga97rrrcuSRR2bjjTdOZWVltt9++/Tv3z+PP/54kuTQQw8t9+3evXt69OiRLl26ZOLEienVq1e91DBq1KicffbZ9TIWAAAAAAAAwLqi3p8kTpIuXbpk0qRJWbJkSebMmZNHHnkk7777bjp37lxn/86dO2eDDTbI888/X2f7BhtskMrKyixYsKDW8QULFqRdu3Z1njN06NAsWrSovM2ZM+ezTQoAAAAAAABgHbBKQuIPNG/ePO3bt8/rr7+eu+++O3379q2z39y5c/Paa6+lffv2dbY3btw4O+ywQyZMmFA+tmzZskyYMCG77LJLnedUVVWlVatWtTYAAAAAAACAolslIfHdd9+dcePGZebMmRk/fnz22muvbLnllhk4cGCWLFmS008/PQ899FBmzZqVCRMmpG/fvtlss83Sp0+f8hi9evXK5ZdfXt4fMmRIrrrqqlxzzTWZOnVqjj/++Lz55psZOHDgqpgCAAAAAAAAwDpplXyTeNGiRRk6dGjmzp2b9dZbLwceeGDOO++8NGrUKO+9917+9re/5ZprrsnChQtTXV2dvffeOyNHjkxVVVV5jBkzZuTVV18t7x9yyCF55ZVXMnz48MyfPz/bbrttxo0bl7Zt266KKQAAAAAAAACsk1ZJSHzwwQfn4IMPrrOtadOmufvuuz92jFmzZi13bNCgQRk0aNBnLQ8AAAAAAACgsFbpN4kBAAAAAAAAWLsIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAWySkLiN954I4MHD86mm26apk2bZtddd82jjz6aJHn33XdzxhlnpHv37mnevHmqq6tz2GGH5aWXXvrIMUeMGJGKiopa25ZbbrkqygcAAAAAAABYZzVcFYMeffTR+fvf/57rrrsu1dXVuf7669O7d+8888wzadGiRZ544okMGzYs22yzTV5//fWcfPLJ+eY3v5nHHnvsI8ft1q1b7rnnnv8rvuEqKR8AAAAAAABgnVXvKeu///3v3Hzzzbn99tuzxx57JHn/KeA//vGPGTNmTM4999yMHz++1jmXX355dt5558yePTubbLLJiott2DDt2rWr75IBAAAAAAAACqPeXzf93nvvpaamJk2aNKl1vGnTprn//vvrPGfRokWpqKhImzZtPnLs6dOnp7q6Op07d86AAQMye/bs+iobAAAAAAAAoBDqPSRu2bJldtlll4wcOTIvvfRSampqcv3112fy5MmZN2/ecv3ffvvtnHHGGenfv39atWq1wnF79uyZsWPHZty4cRkzZkxmzpyZL3/5y3njjTfq7L906dIsXry41gYAAAAAAABQdPUeEifJddddl1KplI033jhVVVW59NJL079//zRoUPty7777bg4++OCUSqWMGTPmI8fcd9998+1vfzs9evRInz598qc//SkLFy7MTTfdVGf/UaNGpXXr1uWtQ4cO9TY/AAAAAAAAgM+rVRISd+nSJZMmTcqSJUsyZ86cPPLII3n33XfTuXPncp8PAuIXXngh48eP/8iniOvSpk2bdO3aNc8//3yd7UOHDs2iRYvK25w5cz7TnAAAAAAAAADWBaskJP5A8+bN0759+7z++uu5++6707dv3yT/FxBPnz4999xzT9Zff/2VHnvJkiWZMWNG2rdvX2d7VVVVWrVqVWsDAAAAAAAAKLpVEhLffffdGTduXGbOnJnx48dnr732ypZbbpmBAwfm3XffzUEHHZTHHnssv/nNb1JTU5P58+dn/vz5eeedd8pj9OrVK5dffnl5/7TTTsukSZMya9asPPjgg+nXr18qKyvTv3//VTEFAAAAAAAAgHVSw1Ux6KJFizJ06NDMnTs36623Xg488MCcd955adSoUWbNmpU//OEPSZJtt9221nn33ntv9txzzyTJjBkz8uqrr5bb5s6dm/79++e1117LhhtumN133z0PPfRQNtxww1UxBQAAAAAAAIB10ioJiQ8++OAcfPDBdbZ17NgxpVLpY8eYNWtWrf0bbrihPkoDAAAAAAAAKLRV+k1iAAAAAAAAANYuQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUiJAYAAAAAAAAoEAarukCAAAAVreOZ965pkugIGY1WdMVAAAAwPI8SQwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAJZJSHxG2+8kcGDB2fTTTdN06ZNs+uuu+bRRx8tt5dKpQwfPjzt27dP06ZN07t370yfPv1jx73iiivSsWPHNGnSJD179swjjzyyKsoHAAAAAAAAWGetkpD46KOPzvjx43Pdddfl6aefzt57753evXvnxRdfTJJccMEFufTSS3PllVfm4YcfTvPmzdOnT5+8/fbbKxzzxhtvzJAhQ3LWWWfliSeeyDbbbJM+ffrk5ZdfXhVTAAAAAAAAAFgn1XtI/O9//zs333xzLrjgguyxxx7ZbLPNMmLEiGy22WYZM2ZMSqVSRo8enR/+8Ifp27dvevTokWuvvTYvvfRSbrvtthWOe9FFF+WYY47JwIEDs/XWW+fKK69Ms2bNcvXVV9f3FAAAAAAAAADWWfUeEr/33nupqalJkyZNah1v2rRp7r///sycOTPz589P7969y22tW7dOz549M3ny5DrHfOedd/L444/XOqdBgwbp3bv3Cs9ZunRpFi9eXGsDAAAAAAAAKLp6D4lbtmyZXXbZJSNHjsxLL72UmpqaXH/99Zk8eXLmzZuX+fPnJ0natm1b67y2bduW2z7s1VdfTU1NzUqdM2rUqLRu3bq8dejQoR5mBwAAAAAAAPD5tkq+SXzdddelVCpl4403TlVVVS699NL0798/DRqsksvVaejQoVm0aFF5mzNnzmq7NgAAAAAAAMDaapWktl26dMmkSZOyZMmSzJkzJ4888kjefffddO7cOe3atUuSLFiwoNY5CxYsKLd92AYbbJDKysqVOqeqqiqtWrWqtQEAAAAAAAAU3Sp9tLd58+Zp3759Xn/99dx9993p27dvOnXqlHbt2mXChAnlfosXL87DDz+cXXbZpc5xGjdunB122KHWOcuWLcuECRNWeA4AAAAAAAAAy2u4Kga9++67UyqVssUWW+T555/P6aefni233DIDBw5MRUVFBg8enHPPPTebb755OnXqlGHDhqW6ujoHHHBAeYxevXqlX79+GTRoUJJkyJAhOfzww7Pjjjtm5513zujRo/Pmm29m4MCBq2IKAAAAAAAAAOukVRISL1q0KEOHDs3cuXOz3nrr5cADD8x5552XRo0aJUm+973v5c0338yxxx6bhQsXZvfdd8+4cePSpEmT8hgzZszIq6++Wt4/5JBD8sorr2T48OGZP39+tt1224wbNy5t27ZdFVMAAAAAAAAAWCdVlEql0pouYnVYvHhxWrdunUWLFvk+MatcxzPvXNMlUBCzmvz3mi6BohixaE1XAFCvrNdYXazXWG2s14B1jPUaq4v1GquN9Rqrwcrkoav0m8QAAAAAAAAArF2ExAAAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAKp95C4pqYmw4YNS6dOndK0adN06dIlI0eOTKlUKvepqKioc/vJT36ywnFHjBixXP8tt9yyvssHAAAAAAAAWKc1rO8Bzz///IwZMybXXHNNunXrlsceeywDBw5M69atc9JJJyVJ5s2bV+ucu+66K0cddVQOPPDAjxy7W7duueeee/6v+Ib1Xj4AAAAAAADAOq3eU9YHH3wwffv2zde//vUkSceOHfO73/0ujzzySLlPu3btap1z++23Z6+99krnzp0/utiGDZc7FwAAAAAAAIBPrt5fN73rrrtmwoQJee6555IkTz31VO6///7su+++dfZfsGBB7rzzzhx11FEfO/b06dNTXV2dzp07Z8CAAZk9e/YK+y5dujSLFy+utQEAAAAAAAAUXb0/SXzmmWdm8eLF2XLLLVNZWZmampqcd955GTBgQJ39r7nmmrRs2TLf+ta3PnLcnj17ZuzYsdliiy0yb968nH322fnyl7+cv//972nZsuVy/UeNGpWzzz67XuYEAAAAAAAAsK6o95D4pptuym9+85v89re/Tbdu3TJlypQMHjw41dXVOfzww5frf/XVV2fAgAFp0qTJR477n08i9+jRIz179symm26am266qc6nkIcOHZohQ4aU9xcvXpwOHTp8hpkBAAAAAAAAfP7Ve0h8+umn58wzz8yhhx6aJOnevXteeOGFjBo1armQ+L777su0adNy4403rvR12rRpk65du+b555+vs72qqipVVVUrPwEAAAAAAACAdVi9f5P4rbfeSoMGtYetrKzMsmXLluv7q1/9KjvssEO22Wablb7OkiVLMmPGjLRv3/5T1woAAAAAAABQNPUeEu+///4577zzcued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tVz/UaNG5eyzz66fSQEAAAAAAACsI+r9ddOnn356zjzzzBx66KHp3r17vvOd7+SUU07JqFGjavX7ICB+4YUXMn78+I98irgubdq0SdeuXfP888/X2T506NAsWrSovM2ZM+dTzwkAAAAAAABgXVHvIfFbb72VBg1qD1tZWZlly5aV9z8IiKdPn5577rkn66+//kpfZ8mSJZkxY0bat29fZ3tVVVVatWpVawMAAAAAAAAounoPiffff/+cd955ufPOOzNr1qzceuutueiii9KvX78k7wfEBx10UB577LH85je/SU1NTebPn5/58+fnnXfeKY/Tq1evXH755eX90047LZMmTcqsWbPy4IMPpl+/fqmsrEz//v3rewoAAAAAAAAA66x6/ybxZZddlmHDhuWEE07Iyy+/nOrq6hx33HEZPnx4kuTFF1/MH/7whyTJtttuW+vce++9N3vuuWeSZMaMGXn11VfLbXPnzk3//v3z2muvZcMNN8zuu++ehx56KBtuuGF9TwEAAAAAAABgnVXvIXHLli0zevTojB49us72jh07plQqfew4s2bNqrV/ww031EN1AAAAAAAAAMVW76+bBgAAAAAAAGDtJSQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAECBCIkBAAAAAAAACkRIDAAAAAAAAFAgQmIAAAAAAACAAhESAwAAAAAAABSIkBgAAAAAAACgQITEAAAAAAAAAAUiJAYAAAAAAAAoECExAAAAAAAAQIEIiQEAAAAAAAAKREgMAAAAAAAAUCBCYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIEJiAAAAAAAAgAIREgMAAAAAAAAUSL2HxDU1NRk2bFg6deqUpk2bpkuXLhk5cmRKpVK5T6lUyvDhw9O+ffs0bdo0vXv3zvTp0z927CuuuCIdO3ZMkyZN0rNnzzzyyCP1XT4AAAAAAADAOq3eQ+Lzzz8/Y8aMyeWXX56pU6fm/PPPzwUXXJDLLrus3OeCCy7IpZdemiuvvDIPP/xwmjdvnj59+uTtt99e4bg33nhjhgwZkrPOOitPPPFEttlmm/Tp0ycvv/xyfU8BAAAAAAAAYJ1V7yHxgw8+mL59++brX/96OnbsmIMOOih77713+anfUqmU0aNH54c//GH69u2bHj165Nprr81LL72U2267bYXjXnTRRTnmmGMycODAbL311rnyyivTrFmzXH311fU9BQAAAAAAAIB1VsP6HnDXXXfNL37xizz33HPp2rVrnnrqqdx///256KKLkiQzZ87M/Pnz07t37/I5rVu3Ts+ePTN58uQceuihy435zjvv5PHHH8/QoUPLxxo0aJDevXtn8uTJddaxdOnSLF26tLy/aNGiJMnixYvrZZ7wUZYtfWtNl0BBLK4ofXwnqA/++wmsY6zXWF2s11htrNeAdYz1GquL9RqrjfUaq8EHOeh/fgZ4Reo9JD7zzDOzePHibLnllqmsrExNTU3OO++8DBgwIEkyf/78JEnbtm1rnde2bdty24e9+uqrqampqfOcZ599ts5zRo0albPPPnu54x06dFjpOQGsrVqv6QIojh/7XxsAfBr+C8pqY70GAJ+K/4Ky2livsRq98cYbad36o/83V+8h8U033ZTf/OY3+e1vf5tu3bplypQpGTx4cKqrq3P44YfX9+VWaOjQoRkyZEh5f9myZfnXv/6V9ddfPxUVFautDoBVZfHixenQoUPmzJmTVq1arelyAAD4EOs1AIC1m/UasK4plUp54403Ul1d/bF96z0kPv3003PmmWeWXxvdvXv3vPDCCxk1alQOP/zwtGvXLkmyYMGCtG/fvnzeggULsu2229Y55gYbbJDKysosWLCg1vEFCxaUx/uwqqqqVFVV1TrWpk2bTzkrgLVXq1atLGIBANZi1msAAGs36zVgXfJxTxB/oEF9X/itt95Kgwa1h62srMyyZcuSJJ06dUq7du0yYcKEcvvixYvz8MMPZ5dddqlzzMaNG2eHHXaodc6yZcsyYcKEFZ4DAAAAAAAAwPLq/Uni/fffP+edd1422WSTdOvWLU8++WQuuuiiHHnkkUmSioqKDB48OOeee24233zzdOrUKcOGDUt1dXUOOOCA8ji9evVKv379MmjQoCTJkCFDcvjhh2fHHXfMzjvvnNGjR+fNN9/MwIED63sKAAAAAAAAAOuseg+JL7vssgwbNiwnnHBCXn755VRXV+e4447L8OHDy32+973v5c0338yxxx6bhQsXZvfdd8+4cePSpEmTcp8ZM2bk1VdfLe8fcsgheeWVVzJ8+PDMnz8/2267bcaNG5e2bdvW9xQAPheqqqpy1llnLfdqfQAA1g7WawAAazfrNaDIKkqlUmlNFwEAAAAAAADA6lHv3yQGAAAAAAAAYO0lJAYAAAAAAAAoECExAAAAAAAAQIEIiQE+pGPHjhk9evQn7j9r1qxUVFRkypQpK+wzduzYtGnT5jPXtqqszvqOOOKIHHDAAeX9UqmUY489Nuutt17557jnnntm8ODBq6UeAODzb2XXbx+2tq/VVpeJEyemoqIiCxcuXNOlAACfIyuzFvus67bPm4qKitx2222r/Dp1reNuu+22bLbZZqmsrMzgwYOteYHlCImBz4UPB4tJ8r//+79p0qRJLrzwwhxxxBGpqKjIj3/841p9brvttlRUVKzUtR599NEce+yxn7Xktcq9996b/fbbL+uvv36aNWuWrbfeOqeeempefPHF1V7LJZdckrFjx5b3x40bl7Fjx+aOO+7IvHnz8l//9V+55ZZbMnLkyNVeGwCwatS1lqtPK7N+q+vG5CGHHJLnnnvuE19vzz33TEVFRSoqKtKkSZN07do1o0aNSqlUWpmy1zq77rpr5s2bl9atW6/pUgCAevDB/bKKioo0atQobdu2zde+9rVcffXVWbZsWb1dZ2XWYvV93+2D+a1oGzFiRL1d68Pmz5+f7373u+ncuXOqqqrSoUOH7L///pkwYcIqu+aK1LWOO+6443LQQQdlzpw5GTly5EqveYF1n5AY+Fz65S9/mQEDBmTMmDE59dRTkyRNmjTJ+eefn9dff/0zjb3hhhumWbNm9VHmKvfuu+9+bJ+f//zn6d27d9q1a5ebb745zzzzTK688sosWrQoF1544WqosrbWrVvX+qvFGTNmpH379tl1113Trl27NGzYMOutt15atmz5qa9RU1NTr//PDgCwdvus67emTZtmo402WqlzjjnmmMybNy/Tpk3L0KFDM3z48Fx55ZWfuoZP4p133lml4zdu3Djt2rVb6T+yBADWXvvss0/mzZuXWbNm5a677spee+2Vk08+Od/4xjfy3nvv1cs1VmYtVt/33ebNm1feRo8enVatWtU6dtppp5X7lkqlepvzrFmzssMOO+Qvf/lLfvKTn+Tpp5/OuHHjstdee+XEE0+sl2usjA+v45YsWZKXX345ffr0SXV1dVq2bPmp1rwf9knuRQKfH0Ji4HPnggsuyHe/+93ccMMNGThwYPn4B0HoqFGjPvL8+++/P1/+8pfTtGnTdOjQISeddFLefPPNcvuHny559tlns/vuu6dJkybZeuutc88999T5qph//vOf2WuvvdKsWbNss802mTx58nLXvu2227L55punSZMm6dOnT+bMmVOrfcyYMenSpUsaN26cLbbYItddd12t9oqKiowZMybf/OY307x585x33nl5/fXXM2DAgGy44YZp2rRpNt988/z6179OksydOzcnnXRSTjrppFx99dXZc88907Fjx+yxxx755S9/meHDh9f5M5oxY0b69u2btm3bpkWLFtlpp51yzz331Orzs5/9rDyXtm3b5qCDDiq3/e///m+6d++epk2bZv3110/v3r3LP+P/fJLoiCOOyHe/+93Mnj07FRUV6dixY5Is97rppUuX5rTTTsvGG2+c5s2bp2fPnpk4cWK5/YPX5fzhD3/I1ltvnaqqqsyePbvOuQEAa5dJkyZl5513TlVVVdq3b58zzzyz1s27N954IwMGDEjz5s3Tvn37XHzxxcutFf5z/VYqlTJixIhssskmqaqqSnV1dU466aQk768xXnjhhZxyyinlp0uSul83/cc//jE77bRTmjRpkg022CD9+vWr1d6sWbO0a9cum266aQYOHJgePXpk/Pjx5faPW78kyVVXXZUOHTqkWbNm6devXy666KJadYwYMSLbbrttfvnLX6ZTp05p0qRJkmThwoU5+uijs+GGG6ZVq1b56le/mqeeeqp83lNPPZW99torLVu2TKtWrbLDDjvkscceS5K88MIL2X///fOFL3whzZs3T7du3fKnP/0pSd2vKbz55pvTrVu3VFVVpWPHjsv9kWHHjh3zox/9KEceeWRatmyZTTbZJL/4xS/q+lUDAGtAVVVV2rVrl4033jjbb799vv/97+f222/PXXfdVX7T28etLZKPXht90rXYh/smyezZs9O3b9+0aNEirVq1ysEHH5wFCxaU2z9YD1133XXp2LFjWrdunUMPPTRvvPFGkqRdu3blrXXr1qmoqCjvP/vss2nZsmXuuuuu7LDDDqmqqsr999+fZcuWZdSoUenUqVOaNm2abbbZJv/7v/9ba75///vfs++++6ZFixZp27ZtvvOd7+TVV18tt59wwgmpqKjII488kgMPPDBdu3ZNt27dMmTIkDz00EMr/H2cccYZ6dq1a5o1a5bOnTtn2LBhtYLX+ljHTZw4sfzwxVe/+tVUVFRk4sSJda55b7/99my//fZp0qRJOnfunLPPPrvWWryue5HAukNIDHyunHHGGRk5cmTuuOOO5W7UVVZW5kc/+lEuu+yyzJ07t87zZ8yYkX322ScHHnhg/va3v+XGG2/M/fffn0GDBtXZv6amJgcccECaNWuWhx9+OL/4xS/ygx/8oM6+P/jBD3LaaadlypQp6dq1a/r3719rUfXWW2/lvPPOy7XXXpsHHnggCxcuzKGHHlpuv/XWW3PyySfn1FNPzd///vccd9xxGThwYO69995a1xkxYkT69euXp59+OkceeWSGDRuWZ555JnfddVemTp2aMWPGZIMNNkiS/P73v88777yT733ve3XWvKLvkCxZsiT77bdfJkyYkCeffDL77LNP9t9//3Lw+thjj+Wkk07KOeeck2nTpmXcuHHZY489krz/F5z9+/fPkUcemalTp2bixIn51re+VefrFy+55JKcc845+eIXv5h58+bl0UcfrbOeQYMGZfLkybnhhhvyt7/9Ld/+9rezzz77ZPr06bV+vueff35++ctf5h//+Mdn/stIAGDVe/HFF7Pffvtlp512ylNPPZUxY8bkV7/6Vc4999xynyFDhuSBBx7IH/7wh4wfPz733XdfnnjiiRWOefPNN+fiiy/Oz3/+80yfPj233XZbunfvniS55ZZb8sUvfjHnnHNO+emSutx5553p169f9ttvvzz55JOZMGFCdt555zr7lkql3HfffXn22WfTuHHj8vGPW7888MAD+Z//+Z+cfPLJmTJlSr72ta/VedPt+eefz80335xbbrklU6ZMSZJ8+9vfzssvv5y77rorjz/+eLbffvv06tUr//rXv5IkAwYMyBe/+MU8+uijefzxx3PmmWemUaNGSZITTzwxS5cuzV//+tc8/fTTOf/889OiRYs65/b444/n4IMPzqGHHpqnn346I0aMyLBhw2p9OiRJLrzwwuy444558sknc8IJJ+T444/PtGnTVvAbAgDWtK9+9avZZpttcssttyT5+LXFyqyNPmot9mHLli1L3759869//SuTJk3K+PHj889//jOHHHJIrX4zZszIbbfdljvuuCN33HFHJk2atNwn5z7KmWeemR//+MeZOnVqevTokVGjRuXaa6/NlVdemX/84x855ZRT8v/+3//LpEmTkrwfmn/1q1/Ndtttl8ceeyzjxo3LggULcvDBBydJ/vWvf2XcuHE58cQT07x58+Wu91Hf/W3ZsmXGjh2bZ555JpdcckmuuuqqXHzxxeX2+ljH7brrruW12M0335x58+Zl1113Xa7ffffdl8MOOywnn3xynnnmmfz85z/P2LFjl1uTfvheJLAOKQF8Dhx++OGlxo0bl5KUJkyYUGd73759S6VSqfSlL32pdOSRR5ZKpVLp1ltvLf3n/6k76qijSscee2ytc++7775SgwYNSv/+979LpVKptOmmm5YuvvjiUqlUKt11112lhg0blubNm1fuP378+FKS0q233loqlUqlmTNnlpKUfvnLX5b7/OMf/yglKU2dOrVUKpVKv/71r0tJSg899FC5z9SpU0tJSg8//HCpVCqVdt1119IxxxxTq7Zvf/vbpf3226+8n6Q0ePDgWn3233//0sCBA+v8uR1//PGlVq1a1dn2n37961+XWrdu/ZF9unXrVrrssstKpVKpdPPNN5datWpVWrx48XL9Hn/88VKS0qxZs+oc5z9/V6VSqXTxxReXNt1001p9vvKVr5ROPvnkUqlUKr3wwgulysrK0osvvlirT69evUpDhw4t15+kNGXKlI+cAwCwZnz4v/8f+P73v1/aYostSsuWLSsfu+KKK0otWrQo1dTUlBYvXlxq1KhR6fe//325feHChaVmzZqV1wqlUu3124UXXljq2rVr6Z133qmzlv/s+4EPr4V22WWX0oABA1Y4n6985SulRo0alZo3b15q1KhRKUmpSZMmpQceeKBUKn2y9cshhxxS+vrXv16rfcCAAbXqOOuss0qNGjUqvfzyy+Vj9913X6lVq1alt99+u9a5Xbp0Kf385z8vlUqlUsuWLUtjx46ts/bu3buXRowYUWfbvffeW0pSev3110ulUqn03//936Wvfe1rtfqcfvrppa233rq8v+mmm5b+3//7f+X9ZcuWlTbaaKPSmDFj6rwGALD6rGgNViq9vxbZaqutPtHa4uPWRp92LfbnP/+5VFlZWZo9e3a5/YN7ao888kipVHp/PdSsWbNa96BOP/30Us+ePZcb+8Nrug/WNrfddlv52Ntvv11q1qxZ6cEHH6x17lFHHVXq379/qVQqlUaOHFnae++9a7XPmTOnlKQ0bdq00sMPP1xKUrrllltW+DP5wH/eQ6zLT37yk9IOO+xQ3q+vddzrr79eSlK69957y30+/PPp1atX6Uc/+lGtca677rpS+/bta9X/4XuRwLrDk8TA50aPHj3SsWPHnHXWWVmyZMkK+51//vm55pprMnXq1OXannrqqYwdOzYtWrQob3369MmyZcsyc+bM5fpPmzYtHTp0SLt27crHVvSXkj169Cj/u3379kmSl19+uXysYcOG2Wmnncr7W265Zdq0aVOuc+rUqdltt91qjbnbbrstN48dd9yx1v7xxx+fG264Idtuu22+973v5cEHHyy3lUqlT/VNuSVLluS0007LVlttlTZt2qRFixaZOnVq+Unir33ta9l0003TuXPnfOc738lvfvObvPXWW0mSbbbZJr169Ur37t3z7W9/O1ddddVn+k70008/nZqamnTt2rXW723SpEmZMWNGuV/jxo1r/Q4AgLXf1KlTs8suu9Rar+y2225ZsmRJ5s6dm3/+85959913a62/WrdunS222GKFY37729/Ov//973Tu3DnHHHNMbr311pX+9tyUKVPSq1evj+wzYMCATJkyJQ888ED23Xff/OAHPyg/ofFJ1i/Tpk1bbl1Z1zpz0003zYYbbljef+qpp7JkyZKsv/76tcaeOXNmeewhQ4bk6KOPTu/evfPjH/+41prppJNOyrnnnpvddtstZ511Vv72t7+tcI4rWp9Onz49NTU15WP/uQb74BWP/7kOBgDWPh/cM/oka4tPsjb6wMqsxaZOnZoOHTqkQ4cO5WNbb711rftlyfuvqP7g9cnJ+/fdVmat8Z/30p5//vm89dZb+drXvlZrvtdee215vk899VTuvffeWu1bbrllkvefai7V8ba8T+rGG2/Mbrvtlnbt2qVFixb54Q9/WOuTafW1jvsknnrqqZxzzjm15nnMMcdk3rx55ft8yfL3IoF1h5AY+NzYeOONM3HixLz44ovZZ599yt8e+bA99tgjffr0ydChQ5drW7JkSY477rhMmTKlvD311FOZPn16unTp8pnq++DVL0nKNzqXLVv2mcasy4dfY7PvvvuWv6330ksvpVevXjnttNOSJF27ds2iRYtW+CrFFTnttNNy66235kc/+lHuu+++TJkyJd27d88777yT5P1X4zzxxBP53e9+l/bt22f48OHZZpttsnDhwlRWVmb8+PG56667svXWW+eyyy7LFltsUWcI/0ksWbIklZWVefzxx2v93qZOnZpLLrmk3K9p06afKhAHANYtHTp0yLRp0/Kzn/0sTZs2zQknnJA99tij1rfePk7Tpk0/tk/r1q2z2WabZaeddspNN92Uyy+/PPfcc0+ST75++SQ+vPZbsmRJ2rdvX2vcKVOmZNq0aTn99NOTvP9KwH/84x/5+te/nr/85S/Zeuutc+uttyZJjj766Pzzn//Md77znTz99NPZcccdc9lll61UTR/2n+vg5P218KpYBwMA9Wfq1Knp1KnTJ1pbfJK10QfqYy32YZ91rfGf66kPHjy58847a833mWeeKX+XeMmSJdl///2X+5lMnz49e+yxRzbffPNUVFTk2WefXal5TJ48OQMGDMh+++2XO+64I08++WR+8IMflO+3Jat3HbdkyZKcffbZteb49NNPZ/r06WnSpEmdPz9g3SIkBj5XNt1000yaNCnz58//yKD4xz/+cf74xz9m8uTJtY5vv/32eeaZZ7LZZpstt/3nN+Q+sMUWW2TOnDlZsGBB+diKvpv7cd5777089thj5f1p06Zl4cKF2WqrrZIkW221VR544IFa5zzwwAPZeuutP3bsDTfcMIcffniuv/76jB49Or/4xS+SJAcddFAaN26cCy64oM7zFi5cWOfxBx54IEcccUT69euX7t27p127dpk1a1atPg0bNkzv3r1zwQUX5G9/+1tmzZqVv/zlL0neX6zvtttuOfvss/Pkk0+mcePG5QXtytpuu+1SU1OTl19+ebnf2X8+4Q0AfP5stdVWmTx5cq2nMR544IG0bNkyX/ziF9O5c+c0atSo1vpr0aJFee655z5y3KZNm2b//ffPpZdemokTJ2by5Ml5+umnk7z/9pH/fAq2Lj169MiECRM+8TxatGiRk08+OaeddlpKpdInWr9sscUWy60rP8k6c/vtt8/8+fPTsGHD5cbeYIMNyv26du2aU045JX/+85/zrW99K7/+9a/LbR06dMj//M//5JZbbsmpp56aq666qs5rrWh92rVr11RWVn7inw8AsHb5y1/+kqeffjoHHnjgJ1pbrOza6KPWYv9pq622ypw5czJnzpzysWeeeSYLFy78RPfDPo2tt946VVVVmT179nLz/eCJ5u233z7/+Mc/0rFjx+X6NG/ePOutt1769OmTK664Im+++eZy11jR/bYHH3wwm266aX7wgx9kxx13zOabb54XXnhhuX71sY77JLbffvtMmzatzvukDRqIjqAIGq7pAgBWVocOHTJx4sTstdde6dOnT8aNG7dcn+7du2fAgAG59NJLax0/44wz8qUvfSmDBg3K0UcfnebNm+eZZ57J+PHjc/nlly83zte+9rV06dIlhx9+eC644IK88cYb+eEPf5gkK/3UaqNGjfLd7343l156aRo2bJhBgwblS1/6Uvm1gqeffnoOPvjgbLfddundu3f++Mc/5pZbbik/kbIiw4cPzw477JBu3bpl6dKlueOOO8rBc4cOHXLxxRdn0KBBWbx4cQ477LB07Ngxc+fOzbXXXpsWLVrkwgsvXG7MzTffPLfcckv233//VFRUZNiwYbX+QvOOO+7IP//5z+yxxx75whe+kD/96U9ZtmxZtthiizz88MOZMGFC9t5772y00UZ5+OGH88orr5RrWlldu3bNgAEDcthhh+XCCy/Mdtttl1deeSUTJkxIjx498vWvf/1TjQsArF6LFi3KlClTah079thjM3r06Hz3u9/NoEGDMm3atJx11lkZMmRIGjRokJYtW+bwww/P6aefnvXWWy8bbbRRzjrrrDRo0GCFa7GxY8empqYmPXv2TLNmzXL99denadOm2XTTTZO8/7rCv/71rzn00ENTVVVVK1j9wFlnnZVevXqlS5cuOfTQQ/Pee+/lT3/6U84444wVzu+4447LyJEjc/PNN+eggw762PXLd7/73eyxxx656KKLsv/+++cvf/lL7rrrro9dY/bu3Tu77LJLDjjggFxwwQXp2rVrXnrppdx5553p169funXrltNPPz0HHXRQOnXqlLlz5+bRRx/NgQcemCQZPHhw9t1333Tt2jWvv/567r333hWu00499dTstNNOGTlyZA455JBMnjw5l19+eX72s599ZI0AwNpj6dKlmT9/fmpqarJgwYKMGzcuo0aNyje+8Y0cdthhadCgwUeuLXbccceVWht93FrsP/Xu3bt8D2/06NF57733csIJJ+QrX/nKKnvFccuWLXPaaafllFNOybJly7L77rtn0aJFeeCBB9KqVascfvjhOfHEE3PVVVelf//++d73vpf11lsvzz//fG644Yb88pe/TGVlZa644orstttu2XnnnXPOOeekR48eee+99zJ+/PiMGTOmzs/gbb755pk9e3ZuuOGG7LTTTrnzzjtrPVTx73//u97WcZ/E8OHD841vfCObbLJJDjrooDRo0CBPPfVU/v73v+fcc8/91OMCnx/+HAT4XPriF7+YiRMn5tVXX02fPn2yePHi5fqcc845y716pkePHpk0aVKee+65fPnLX852222X4cOHp7q6us7rVFZW5rbbbsuSJUuy00475eijj84PfvCDJKn12pVPolmzZjnjjDPy3//939ltt93SokWL3HjjjeX2Aw44IJdcckl++tOfplu3bvn5z3+eX//619lzzz0/ctzGjRtn6NCh6dGjR/bYY49UVlbmhhtuKLefcMIJ+fOf/5wXX3wx/fr1y5Zbbpmjjz46rVq1Kr+W+sMuuuiifOELX8iuu+6a/fffP3369Mn2229fbm/Tpk1uueWWfPWrX81WW22VK6+8Mr/73e/SrVu3tGrVKn/961+z3377pWvXrvnhD3+YCy+8MPvuu+9K/bz+069//escdthhOfXUU7PFFlvkgAMOyKOPPppNNtnkU48JAKxeEydOzHbbbVdrGzlyZP70pz/lkUceyTbbbJP/+Z//yVFHHVX+o7zk/XXJLrvskm984xvp3bt3dtttt2y11VYrXIu1adMmV111VXbbbbf06NEj99xzT/74xz9m/fXXT/L+GnHWrFnp0qVLrW/9/qc999wzv//97/OHP/wh2267bb761a/mkUce+cj5rbfeejnssMMyYsSILFu27GPXL7vttluuvPLKXHTRRdlmm20ybty4nHLKKR+7xqyoqMif/vSn7LHHHhk4cGC6du2aQw89NC+88ELatm2bysrKvPbaaznssMPStWvXHHzwwdl3331z9tlnJ0lqampy4oknZquttso+++yTrl27rjD03X777XPTTTflhhtuyH/9139l+PDhOeecc3LEEUd8ZI0AwNpj3Lhxad++fTp27Jh99tkn9957by699NLcfvvtqays/Ni1RbJya6OPW4v9p4qKitx+++35whe+kD322CO9e/dO586da90vWxVGjhyZYcOGZdSoUeU10Z133plOnTolSaqrq/PAAw+kpqYme++9d7p3757BgwenTZs25SdsO3funCeeeCJ77bVXTj311PzXf/1Xvva1r2XChAkZM2ZMndf95je/mVNOOSWDBg3KtttumwcffDDDhg0rt9fnOu6T6NOnT+644478+c9/zk477ZQvfelLufjii+sM9IF1U0Xps3xlHaCAHnjggey+++55/vnnP/N3jAEAWDlvvvlmNt5441x44YU56qij1nQ59eqYY47Js88+m/vuu29NlwIAAMA6zuumAT7GrbfemhYtWmTzzTfP888/n5NPPjm77babgBgAYDV48skn8+yzz2bnnXfOokWLcs455yRJ+vbtu4Yr++x++tOf5mtf+1qaN2+eu+66K9dcc41XOQMAALBaCIkBPsYbb7yRM844I7Nnz84GG2yQ3r171/kdXwAAVo2f/vSnmTZtWho3bpwddtgh9913X53fEv68eeSRR3LBBRfkjTfeSOfOnXPppZfm6KOPXtNlAQAAUABeNw0AAAAAAABQIA3WdAEAAAAAAAAArD5CYgAAAAAAAIACERIDAAAAAAAAFIiQGAAAAAAAAKBAhMQAAAAAAAAABSIkBgAAAAAAACgQITEAAAAAAABAgQiJAQAAAAAAAApESAwAAAAAAABQIP8fdgSRjQfPdRwAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "models = {}\n",
        "models['KNeighborsClassifier']= knn\n",
        "models['LogisticRegression']= lr\n",
        "models['DecisionTreeClassifier']= dtc"
      ],
      "metadata": {
        "id": "WcmFdcGCimai"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "preds={}\n",
        "for name in models:\n",
        "    models[name].fit(x_train, y_train)\n",
        "    preds[name] = models[name].predict(x_test)\n",
        "print(\"Predictions complete.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hiQ1GZ-Hix8J",
        "outputId": "85af196b-dc05-48e5-f1a6-2182eb000c6a"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predictions complete.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report, f1_score\n",
        "def line(name,sym=\"*\"):\n",
        "    return sym*(25-len(name)//2)\n",
        "target_names=[\"normal\",\"anamoly\"]\n",
        "for name in models:\n",
        "    print(line(name), name, 'Model Testing', line(name))\n",
        "    print(confusion_matrix(y_test, preds[name]))\n",
        "    print(line(name,'-'))\n",
        "    print(classification_report(y_test, preds[name], target_names=target_names))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iALMudtKix5g",
        "outputId": "66460d65-534d-4c88-b2a3-c9ad9cb9b0d3"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*************** KNeighborsClassifier Model Testing ***************\n",
            "[[3435   63]\n",
            " [  65 3995]]\n",
            "---------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      normal       0.98      0.98      0.98      3498\n",
            "     anamoly       0.98      0.98      0.98      4060\n",
            "\n",
            "    accuracy                           0.98      7558\n",
            "   macro avg       0.98      0.98      0.98      7558\n",
            "weighted avg       0.98      0.98      0.98      7558\n",
            "\n",
            "**************** LogisticRegression Model Testing ****************\n",
            "[[3127  371]\n",
            " [ 210 3850]]\n",
            "----------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      normal       0.94      0.89      0.91      3498\n",
            "     anamoly       0.91      0.95      0.93      4060\n",
            "\n",
            "    accuracy                           0.92      7558\n",
            "   macro avg       0.92      0.92      0.92      7558\n",
            "weighted avg       0.92      0.92      0.92      7558\n",
            "\n",
            "************** DecisionTreeClassifier Model Testing **************\n",
            "[[3484   14]\n",
            " [  26 4034]]\n",
            "--------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      normal       0.99      1.00      0.99      3498\n",
            "     anamoly       1.00      0.99      1.00      4060\n",
            "\n",
            "    accuracy                           0.99      7558\n",
            "   macro avg       0.99      0.99      0.99      7558\n",
            "weighted avg       0.99      0.99      0.99      7558\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "f1s = {}\n",
        "for name in models:\n",
        "    f1s[name]=f1_score(y_test, preds[name])\n",
        "f1s=pd.DataFrame(f1s.values(),index=f1s.keys(),columns=[\"F1-score\"])*100\n",
        "f1s.plot(kind = \"bar\",  ylim=[80,100], figsize=(10,6), rot=0)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 546
        },
        "id": "i1rU3F-jix2s",
        "outputId": "601d7353-f34f-410a-97d7-cada8d9180e8"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rlzcRFo7i3A8"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}