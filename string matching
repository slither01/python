


-------kmp----------
def kmp_search(text, pattern):
    m, n = len(pattern), len(text)

    # Compute the LPS array
    lps = [0] * m
    j = 0

    for i in range(1, m):
        while j > 0 and pattern[i] != pattern[j]:
            j = lps[j - 1]

        if pattern[i] == pattern[j]:
            j += 1

        lps[i] = j

    # Search for the pattern in the text
    i = j = 0
    while i < n:
        if pattern[j] == text[i]:
            i += 1
            j += 1

            if j == m:
                print(f"Pattern found at index {i - j}")
                j = lps[j - 1]
        else:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

# Example usage
text = "ABABDABACDABABCABAB"
pattern = "ABABCABAB"
print("Searching for pattern in text:")
kmp_search(text, pattern)





----------optimal merge----------
import heapq

def optimal_merge(file_sizes):
    heapq.heapify(file_sizes)

    total_cost = 0

    while len(file_sizes) > 1:
        smallest_file1 = heapq.heappop(file_sizes)
        smallest_file2 = heapq.heappop(file_sizes)

        merged_file = smallest_file1 + smallest_file2
        total_cost += merged_file

        heapq.heappush(file_sizes, merged_file)

    return total_cost

# Example usage
sizes = [4, 8, 6, 12]
cost = optimal_merge(sizes)
print(f"Optimal merge cost: {cost}")




--------max/min in an array------------
def find_max_min(arr):
    if not arr:
        return None, None

    max_value = min_value = arr[0]

    for num in arr:
        if num > max_value:
            max_value = num
        elif num < min_value:
            min_value = num

    return max_value, min_value

# Example usage
numbers = [5, 8, 2, 10, 3, 7]
max_val, min_val = find_max_min(numbers)

print(f"Maximum value: {max_val}")
print(f"Minimum value: {min_val}")
